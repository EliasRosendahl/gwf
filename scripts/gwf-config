import argparse
import sys

import gwf.configurations as configs
from gwf.backends import AVAILABLE_BACKENDS


## Helper functions ################################################################################################
def print_configs(config):
    sections = config.sections()
    if len(sections) == 0:
        print '## There are no configuration options set.'
    for section in sections:
        print '[{}]'.format(section)
        for name, value in config.items(section):
            print name, value
        print


## Option parser ################################################################################################
parser = argparse.ArgumentParser(
    description="""
    Grid WorkFlow -- Keeps track of the status of jobs in a workflow and submits jobs that needs to be run.
    
    gwf-config is used for setting GWF options either global for the user or for the current working directory.
    """,
    epilog="""
    For questions, comments or bug-reports contact <mailund@birc.au.dk> or go to https://github.com/mailund/gwf/issues/
    """)

parser.add_argument('--print', dest='print_options', default=False, action='store_true',  
    help="""Print the options that are set for this working directory.""")
parser.add_argument('--print-global', default=False, action='store_true',  
    help="""Print the options that are explicitly set user-wide. This does not include system wide defaults or local options.""")
parser.add_argument('--print-local', default=False, action='store_true',  
    help="""Print the options that are explicitly set for the current directory.""")


parser.add_argument('--global', dest='global_options', default=False, action='store_true',  
    help="""Set a global option. Such an option will be set for all workflows run by the user unless explicitly overwritten using
    a local option. By default, options will only be set for the workflow in the current working directory.""")

parser.add_argument('--backend', choices=AVAILABLE_BACKENDS.keys(), help='Grid backend to use.')

args = parser.parse_args()


## Handle options ################################################################################################
if args.print_options:
    print_configs(configs.read_configurations())
    sys.exit(0)

if args.print_global:
    print_configs(configs.read_user_configurations())
    sys.exit(0)

if args.print_local:
    print_configs(configs.read_local_configurations())
    sys.exit(0)

# If we are not printing we need to get hold of the right configuration file
if args.global_options:
    config = configs.read_user_configurations()
else:
    config = configs.read_local_configurations()
if not config.has_section('gwf'):
    config.add_section('gwf')

# update it with whatever options are being set
if args.backend:
    config.set('gwf', 'backend', args.backend)

# and write it back again...
if args.global_options:
    configs.write_user_configurations(config)
else:
    configs.write_local_configurations(config)
