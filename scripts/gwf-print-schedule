#!/Users/mailund/anaconda/bin/python

import sys
import argparse

parser = argparse.ArgumentParser(description='''Print the jobs needed to complete a task.

The schedule is written out in reverse order, following dependencies for the
task, since this is easier to read, but the actual schedule if it is submitted
of course submits in the other order.
''')

parser.add_argument('-f', '--file', 
                    default='workflow.py', dest='workflow_file',
                    help='Workflow file if not the default (workflow.py).')

parser.add_argument('target', nargs=1,
                    help='The target to process.')

args = parser.parse_args()
execfile(args.workflow_file)
from gwf_workflow.workflow import build_workflow, schedule
workflow = build_workflow()
nodes = workflow.targets

target = args.target[0]
if target not in nodes:
    print 'Target %s not found in workflow.' % target
    sys.exit(2)

execution_schedule, scheduled_tasks = schedule(nodes, target)
execution_schedule.reverse()

for job in execution_schedule:
    if job.job_in_queue:
        print job.target.name, 'IN QUEUE:',
        print '(%s : %s)' % (job.jobID, job.job_queue_status),
    else:
        print job.target.name,
        if job.should_run:
            print 'OUT OF DATE',
    print '[%s]' % ' '.join([dep.target.name for dep in job.depends_on])
